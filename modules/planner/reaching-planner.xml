<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="yarpmanifest.xsl"?>

<module>
  <name>reaching-planner</name>
  <doxygen-group></doxygen-group>
  <description>Module to generate a motion plan for an iCub arm.</description>
  <copypolicy>Released under the terms of the GNU GPL v2.0</copypolicy>
  <version>1.0</version>
  
  <description-long>
    This module can be triggered by send rpc command to the input rpc port

    To correctly use the module with iCub Simulator, do the following:
	- Launch iCub Simulator, i.e typing **iCub_SIM** in a *terminal*
	- Launch this planner module
	- Send rpc command to this planner module, i.e typing **yarp rpc "input_rpc_port"**

    To correctly use the module with real robot, do the following:
	- Launch  <a href="https://github.com/robotology/wysiwyd"> <b>WYSIWYD</b></a> application from *yarpmanager*
	- Launch <a href="http://wiki.icub.org/brain/group__actionsRenderingEngine.html"><b>actionsRenderingEngine</b></a> module from a new *terminal*
	- Connect all port in **WYSIWYD** application from *yarpmanager*
	- Open another new *terminal*, put some objects on the table in front of the iCub face and type: 
		+ **echo "home all" | yarp rpc /actionsRenderingEngine/cmd:io**, to move iCub to *home* pose.
		+ **echo "calib table" | yarp rpc /actionsRenderingEngine/cmd:io**, to calibrate the table with iCub's finger.
	- Launch this planner module
	- Send rpc command to this planner module
    
  </description-long>

  <arguments>
<!--<param default="reaching-planner" desc="Select the current context (default parameter).">context</param>-->

  
  </arguments>
 
  <authors>
    <author email="phuong.nguyen@iit.it"> NGUYEN Dong Hai Phuong </author>
  </authors>

  <data>
  <input>
      <type>yarp::os::Bottle</type>
      <port carrier="tcp">/reaching-planner/OPC/rpc:io</port>
      <description>
        receive Target, obstacles from /OPC/rpc port
      </description>
  </input>
  <input>
      <type>yarp::os::Bottle</type>
      <port carrier="tcp">/reaching-planner/rpc:i</port>
      <description>
        receive trigger command.
      </description>
  </input>
    <output>
      <type>waypointTrajectory</type>
      <port carrier="tcp">/reaching-planner/bestCartersianTrajectory:o</port>
      <description>
        send trajectories of controlled points in the format:
	<b>(((control-point <i>string_value</i>) (number-waypoints <i>int_value</i>) (number-dimension <i>int_value</i>) (waypoint_0 (x0 y0 z0)) waypoint_1 (x1 y1 z1)) ...) (<i> controlled point 2 </i>) ...)</b>
      </description>
    </output>

    <output>
      <type>waypointTrajectory</type>
      <port carrier="tcp">/reaching-supervisor/particlesCartersianTrajectory:o</port>
      <description>
        send particled trajectories of controlled points in the format:
	<b>(((control-point <i>string_value</i>) (number-waypoints <i>1</i>) (number-dimension <i>int_value</i>) (waypoint_0 (x0 y0 z0)) waypoint_1 (x1 y1 z1)) ...) (<i> controlled point 2 </i>) ...)</b>
      </description>
    </output>

  </data>

</module>
